// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PuckPro.Models;

#nullable disable

namespace PuckPro.Migrations
{
    [DbContext(typeof(PuckDBContext))]
    partial class PuckDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PuckPro.Models.Cities", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("country_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("PuckPro.Models.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("city_name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("PuckPro.Models.GameRevenue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<float>("Income")
                        .HasColumnType("real")
                        .HasColumnName("Income");

                    b.Property<int>("SoldTickets")
                        .HasColumnType("integer")
                        .HasColumnName("sold_tickets");

                    b.Property<int>("TotalViewers")
                        .HasColumnType("integer")
                        .HasColumnName("total_viewers");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.ToTable("GameRevenues");
                });

            modelBuilder.Entity("PuckPro.Models.Games", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<DateTime>("GameDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("game_date");

                    b.Property<long>("GuestTeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("guest_team_id");

                    b.Property<long>("HomeTeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("home_team_id");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("GuestTeamId");

                    b.HasIndex("HomeTeamId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("PuckPro.Models.GamesResults", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<bool>("HasOverTime")
                        .HasColumnType("boolean")
                        .HasColumnName("has_overtime");

                    b.Property<bool>("HasPenalty")
                        .HasColumnType("boolean")
                        .HasColumnName("has_penalty");

                    b.Property<int>("LoserCount")
                        .HasColumnType("integer")
                        .HasColumnName("loser_count");

                    b.Property<TimeOnly>("TotalPlayedTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("total_played_time");

                    b.Property<int>("WinnerCount")
                        .HasColumnType("integer")
                        .HasColumnName("winner_count");

                    b.Property<long>("WinnerTeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("winner_team_id");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("WinnerTeamId");

                    b.ToTable("GamesResults");
                });

            modelBuilder.Entity("PuckPro.Models.PlayerSalary", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("Bonus")
                        .HasColumnType("real")
                        .HasColumnName("bonus");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create");

                    b.Property<float>("Fine")
                        .HasColumnType("real")
                        .HasColumnName("fine");

                    b.Property<float>("Money")
                        .HasColumnType("real")
                        .HasColumnName("salary");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerSalaries");
                });

            modelBuilder.Entity("PuckPro.Models.PlayerStatisticPerGame", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Assists")
                        .HasColumnType("integer")
                        .HasColumnName("assists");

                    b.Property<TimeOnly>("FineTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("fine_time");

                    b.Property<long>("GameId")
                        .HasColumnType("bigint")
                        .HasColumnName("game_id");

                    b.Property<int>("Goals")
                        .HasColumnType("integer")
                        .HasColumnName("goals");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.HasKey("Id");

                    b.HasIndex("GameId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerStatisticPerGames");
                });

            modelBuilder.Entity("PuckPro.Models.Players", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer")
                        .HasColumnName("homeland_id");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_birth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("MiddleName")
                        .HasColumnType("text")
                        .HasColumnName("middle_name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("PuckPro.Models.PlayersProperties", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<float>("FootSize")
                        .HasColumnType("real")
                        .HasColumnName("foot_size");

                    b.Property<float>("Height")
                        .HasColumnType("real")
                        .HasColumnName("height");

                    b.Property<int>("MainHand")
                        .HasColumnType("integer")
                        .HasColumnName("main_hand");

                    b.Property<int>("Number")
                        .HasColumnType("integer")
                        .HasColumnName("number");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasColumnName("position");

                    b.Property<float>("Weight")
                        .HasColumnType("real")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayersProperties");
                });

            modelBuilder.Entity("PuckPro.Models.PlayersRating", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActualOnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_on_date");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.Property<float>("Rating")
                        .HasColumnType("real")
                        .HasColumnName("rating");

                    b.Property<int>("TotalAssists")
                        .HasColumnType("integer")
                        .HasColumnName("total_assists");

                    b.Property<TimeOnly>("TotalFineTime")
                        .HasColumnType("time without time zone")
                        .HasColumnName("total_fine_time");

                    b.Property<int>("TotalGames")
                        .HasColumnType("integer")
                        .HasColumnName("total_games");

                    b.Property<int>("TotalGoals")
                        .HasColumnType("integer")
                        .HasColumnName("total_goals");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayersRatings");
                });

            modelBuilder.Entity("PuckPro.Models.TeamRoasters", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_id");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.HasIndex("TeamId");

                    b.ToTable("TeamRoasters");
                });

            modelBuilder.Entity("PuckPro.Models.TeamStatistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("ActualOnDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("actual_on_date");

                    b.Property<int>("Lose")
                        .HasColumnType("integer")
                        .HasColumnName("lose");

                    b.Property<float>("Popularity")
                        .HasColumnType("real")
                        .HasColumnName("popularity");

                    b.Property<long>("TeamId")
                        .HasColumnType("bigint")
                        .HasColumnName("team_id");

                    b.Property<int>("Wins")
                        .HasColumnType("integer")
                        .HasColumnName("wins");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamStatistics");
                });

            modelBuilder.Entity("PuckPro.Models.Teams", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("integer")
                        .HasColumnName("city_id");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex(new[] { "Name" }, "teams_names_uniq_index")
                        .IsUnique();

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("PuckPro.Models.Cities", b =>
                {
                    b.HasOne("PuckPro.Models.Countries", "Country")
                        .WithMany("Cities")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PuckPro.Models.GameRevenue", b =>
                {
                    b.HasOne("PuckPro.Models.Games", "Game")
                        .WithMany("Revenues")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("PuckPro.Models.Games", b =>
                {
                    b.HasOne("PuckPro.Models.Cities", "City")
                        .WithMany("Games")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PuckPro.Models.Teams", "GuestTeam")
                        .WithMany("AwayGames")
                        .HasForeignKey("GuestTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PuckPro.Models.Teams", "HomeTeam")
                        .WithMany("HomeGames")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("GuestTeam");

                    b.Navigation("HomeTeam");
                });

            modelBuilder.Entity("PuckPro.Models.GamesResults", b =>
                {
                    b.HasOne("PuckPro.Models.Games", "Game")
                        .WithMany("Results")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PuckPro.Models.Teams", "Team")
                        .WithMany("WonGames")
                        .HasForeignKey("WinnerTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PuckPro.Models.PlayerSalary", b =>
                {
                    b.HasOne("PuckPro.Models.Players", "Player")
                        .WithMany("Salaries")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PuckPro.Models.PlayerStatisticPerGame", b =>
                {
                    b.HasOne("PuckPro.Models.Games", "Game")
                        .WithMany("PlayerStatistic")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PuckPro.Models.Players", "Player")
                        .WithMany("StatisticPerGame")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PuckPro.Models.Players", b =>
                {
                    b.HasOne("PuckPro.Models.Countries", "Country")
                        .WithMany("Players")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("PuckPro.Models.PlayersProperties", b =>
                {
                    b.HasOne("PuckPro.Models.Players", "Player")
                        .WithMany("Properties")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PuckPro.Models.PlayersRating", b =>
                {
                    b.HasOne("PuckPro.Models.Players", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("PuckPro.Models.TeamRoasters", b =>
                {
                    b.HasOne("PuckPro.Models.Players", "Player")
                        .WithOne("Team")
                        .HasForeignKey("PuckPro.Models.TeamRoasters", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PuckPro.Models.Teams", "Team")
                        .WithMany("Roaster")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PuckPro.Models.TeamStatistic", b =>
                {
                    b.HasOne("PuckPro.Models.Teams", "Team")
                        .WithMany("Statistics")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PuckPro.Models.Teams", b =>
                {
                    b.HasOne("PuckPro.Models.Cities", "City")
                        .WithMany("Teams")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("PuckPro.Models.Cities", b =>
                {
                    b.Navigation("Games");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("PuckPro.Models.Countries", b =>
                {
                    b.Navigation("Cities");

                    b.Navigation("Players");
                });

            modelBuilder.Entity("PuckPro.Models.Games", b =>
                {
                    b.Navigation("PlayerStatistic");

                    b.Navigation("Results");

                    b.Navigation("Revenues");
                });

            modelBuilder.Entity("PuckPro.Models.Players", b =>
                {
                    b.Navigation("Properties");

                    b.Navigation("Salaries");

                    b.Navigation("StatisticPerGame");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("PuckPro.Models.Teams", b =>
                {
                    b.Navigation("AwayGames");

                    b.Navigation("HomeGames");

                    b.Navigation("Roaster");

                    b.Navigation("Statistics");

                    b.Navigation("WonGames");
                });
#pragma warning restore 612, 618
        }
    }
}
